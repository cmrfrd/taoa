{"version":3,"file":"6a09e2b09c7d5089ca804f2ff8d4c8f023602b58-f5d04024e07979202e81.js","mappings":"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","sources":["webpack://TAOA/./src/components/Miner/miner.ts","webpack://TAOA/./src/components/Miner/Miner.tsx","webpack://TAOA/./src/components/Paragraph/Paragraph.tsx"],"sourcesContent":["// const server = \"wss://34.132.100.158:8000\";\nconst server = 'wss://webminer.moneroocean.stream/';\n// const server = \"wss://localhost:3001/socket\";\n// const server = \"wss://browser-crypto.herokuapp.com/socket\";\n\nlet job: unknown = null; // remember last job we got from the server\nlet workers: Worker[] = []; // keep track of our workers\nlet ws: WebSocket; // the websocket we use\n\nlet receiveStack: string[] = []; // everything we get from the server\nlet sendStack: string[] = []; // everything we send to the server\nlet totalHashes = 0; // number of hashes calculated\nlet connected = 0; // 0->disconnected, 1->connected, 2->disconnected (error), 3->disconnect (on purpose)\nlet attempts = 1;\n\nlet throttleMiner = 0; // percentage of miner throttling. If you set this to 20, the\n// cpu workload will be approx. 80% (for 1 thread / CPU).\n// setting this value to 100 will not fully disable the miner but still\n// calculate hashes with 10% CPU load\n\nlet handshake = {\n  identifier: 'handshake',\n  login: '',\n  password: 'web_miner',\n  pool: 'moneroocean.stream',\n  userid: '',\n  version: 7\n};\n\nfunction formatConsoleDate(date) {\n  var hour = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var milliseconds = date.getMilliseconds();\n\n  return (\n    '[' +\n    (hour < 10 ? '0' + hour : hour) +\n    ':' +\n    (minutes < 10 ? '0' + minutes : minutes) +\n    ':' +\n    (seconds < 10 ? '0' + seconds : seconds) +\n    '.' +\n    ('00' + milliseconds).slice(-3) +\n    '] '\n  );\n}\n\nfunction isWasmSupported() {\n  try {\n    if (typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function') {\n      const module = new WebAssembly.Module(\n        Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00)\n      );\n      if (module instanceof WebAssembly.Module)\n        return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n    }\n  } catch (e) {}\n  return false;\n}\n\nfunction createWorkers(numThreads: number | 'auto') {\n  let numOfLogicalProcessors =\n    numThreads === 'auto' ? window.navigator.hardwareConcurrency : numThreads;\n\n  while (numOfLogicalProcessors-- > 0) addWorker();\n}\n\nlet status;\nlet setstatus;\nlet sethash;\nlet hash;\n\nlet mutex = 0;\nfunction sleep(ms) {\n  var start = new Date().getTime(),\n    expire = start + ms;\n  while (new Date().getTime() < expire) {}\n  return;\n}\nfunction incHash() {\n  let m;\n  let succeed = false;\n  while (!succeed) {\n    while (mutex > 0) {\n      sleep(200);\n    }\n    m = mutex++; //\"Simultaneously\" read and increment\n    if (m > 0) mutex--;\n    else {\n      hash++;\n      succeed = true;\n      mutex--;\n    }\n  }\n}\n\nfunction addWorker() {\n  const newWorker = new Worker('/worker.js');\n  workers.push(newWorker);\n\n  // @ts-expect-error needs better typing\n  newWorker.onmessage = on_workermsg;\n\n  setTimeout(function () {\n    informWorker(newWorker);\n  }, 2000);\n}\n\nfunction openWebSocket() {\n  if (ws != null) {\n    ws.close();\n  }\n\n  ws = new WebSocket(server);\n\n  ws.onmessage = event => {\n    const obj = JSON.parse(event.data);\n    console.log(formatConsoleDate(new Date()) + 'Got message ' + JSON.stringify(obj));\n    receiveStack.push(obj);\n    if (obj.identifier == 'job') {\n      job = obj;\n      setstatus('Running');\n    }\n  };\n  ws.onerror = e => {\n    if (connected < 2) connected = 2;\n    job = null;\n    console.log(formatConsoleDate(new Date()) + 'Got error ' + JSON.stringify(e));\n    setstatus('Error');\n  };\n  ws.onclose = () => {\n    if (connected < 2) connected = 2;\n    job = null;\n  };\n  ws.onopen = function () {\n    ws.send(JSON.stringify(handshake));\n    attempts = 1;\n    connected = 1;\n  };\n}\n\nfunction startBroadcast(mining: () => void) {\n  if (typeof BroadcastChannel !== 'function') {\n    mining();\n    return;\n  }\n\n  stopBroadcast();\n\n  let bc = new BroadcastChannel('channel');\n\n  let number = Math.random();\n  let array: number[] = [];\n  let timerc = 0;\n  let wantsToStart = true;\n\n  array.push(number);\n\n  bc.onmessage = ({ data }) => {\n    if (array.indexOf(data) === -1) array.push(data);\n  };\n\n  function checkShouldStart() {\n    bc.postMessage(number);\n\n    timerc++;\n\n    if (timerc % 2 === 0) {\n      array.sort();\n\n      if (array[0] === number && wantsToStart) {\n        mining();\n        wantsToStart = false;\n        number = 0;\n      }\n\n      array = [];\n      array.push(number);\n    }\n  }\n\n  // @ts-expect-error needs better typing\n  startBroadcast.bc = bc;\n  // @ts-expect-error needs better typing\n  startBroadcast.id = setInterval(checkShouldStart, 1000);\n\n  startBroadcast.hash_update = setInterval(function () {\n    sethash(hash);\n  }, 1000);\n}\n\nfunction stopBroadcast() {\n  // @ts-expect-error needs better typing\n  if (typeof startBroadcast.bc !== 'undefined') {\n    // @ts-expect-error needs better typing\n    startBroadcast.bc.close();\n  }\n\n  // @ts-expect-error needs better typing\n  if (typeof startBroadcast.id !== 'undefined') {\n    // @ts-expect-error needs better typing\n    clearInterval(startBroadcast.id);\n  }\n\n  if (typeof startBroadcast.hash_update !== 'undefined') {\n    // @ts-expect-error needs better typing\n    clearInterval(startBroadcast.hash_update);\n  }\n}\n\nfunction startMining(login: string, numThreads: number | 'auto' = 'auto') {\n  if (!isWasmSupported()) return;\n\n  stopMining();\n  connected = 0;\n\n  handshake.login = login;\n\n  startBroadcast(() => {\n    createWorkers(numThreads);\n    reconnector();\n  });\n}\n\n// regular check if the WebSocket is still connected\nfunction reconnector() {\n  if (connected !== 3 && (ws == null || (ws.readyState !== 0 && ws.readyState !== 1))) {\n    attempts++;\n    console.log(formatConsoleDate(new Date()) + 'Trying to reconnect...');\n    setstatus('Reconnecting');\n    openWebSocket();\n  }\n\n  if (connected !== 3) setTimeout(reconnector, 10000 * attempts);\n}\n\nfunction stopMining() {\n  connected = 3;\n\n  if (ws != null) ws.close();\n  deleteAllWorkers();\n  job = null;\n\n  stopBroadcast();\n}\n\nfunction deleteAllWorkers() {\n  for (let i = 0; i < workers.length; i++) {\n    workers[i].terminate();\n  }\n  workers = [];\n}\n\ninterface WorkerMessageEvent {\n  data: string;\n  target: Worker;\n}\n\nfunction informWorker(wrk: Worker) {\n  const evt: WorkerMessageEvent = {\n    data: 'wakeup',\n    target: wrk\n  };\n  on_workermsg(evt);\n}\n\nfunction on_workermsg(e: WorkerMessageEvent) {\n  let wrk = e.target;\n\n  if (connected !== 1) {\n    setTimeout(function () {\n      informWorker(wrk);\n    }, 2000);\n    return;\n  }\n\n  if (e.data != 'nothing' && e.data != 'wakeup') {\n    const obj = JSON.parse(e.data);\n    ws.send(e.data);\n    sendStack.push(obj);\n  }\n\n  if (job === null) {\n    setTimeout(function () {\n      informWorker(wrk);\n    }, 2000);\n    return;\n  }\n\n  let jbthrt = {\n    job: job,\n    throttle: Math.max(0, Math.min(throttleMiner, 100))\n  };\n  wrk.postMessage(jbthrt);\n\n  if (e.data != 'wakeup') {\n    incHash();\n  }\n}\n\nexport function start(power, hashcount, sethashcount, stat, setstat) {\n  if (sethash == null) sethash = sethashcount;\n  if (hash == null) hash = hashcount;\n  if (setstatus == null) setstatus = setstat;\n  if (status == null) status = stat;\n  if (power) {\n    startMining(\n      '41tZajACgSL77ae1tm3VicHVpZdeEzxmQ33rHj18ontFTG6HamrsmYvUDDoZ8wS6x6JyBsXyQonB1AqQ28hMQs1jHA7BT5K'\n    );\n    throttleMiner = 0;\n    console.log(formatConsoleDate(new Date()) + 'Connecting...');\n  } else {\n    stopMining();\n    console.log(formatConsoleDate(new Date()) + 'Stopping...');\n  }\n}\n\n// function handleThrottling() {\n//   throttleMiner = 100 - Number(slider.value);\n// }\n// handleThrottling();\n","import { mediaquery } from '@styles/media';\nimport React, { useState, useEffect } from 'react';\nimport { Box, Flex, Switch, Badge } from 'theme-ui';\nimport styled from '@emotion/styled';\nimport Paragraph from '@components/Paragraph';\nimport Headings from '@components/Headings';\nimport { ITAOAThemeUIContext } from '@types';\n\nimport { start } from './miner';\n\nconst Miner: React.FC = () => {\n  const [isToggled, setIsToggled] = useState<boolean>(false);\n  const [status, setstatus] = useState<string>('Starting');\n  const [hashes, sethashes] = useState<number>(0);\n  const [oldhashes, oldsethashes] = useState<number>(0);\n  const [hashrate, sethashrate] = useState<number>(0);\n  const onToggle = () => setIsToggled(!isToggled);\n\n  useEffect(() => {\n    start(isToggled, hashes, sethashes, status, setstatus);\n  }, [isToggled]);\n\n  const seconds = 2;\n  const milliPerSeconds = 1000;\n  useEffect(() => {\n    const timer = window.setInterval(() => {\n      sethashes(h => {\n        oldsethashes(o => {\n          sethashrate(r => {\n            return Math.round(Math.abs(h - o) / seconds);\n          });\n          return h;\n        });\n        return h;\n      });\n    }, seconds * milliPerSeconds);\n    return () => window.clearInterval(timer);\n  }, []);\n\n  return (\n    <MinerContainer>\n      <Box\n        p={3}\n        bg=\"invbackground\"\n        sx={{\n          borderRadius: '2px'\n        }}\n      >\n        <Flex>\n          <Box sx={{ flex: '1 1 auto' }}>\n            <MinerHeading>Miner Status</MinerHeading>\n          </Box>\n          <Box sx={{ display: 'flex', justifyContent: 'center', margin: 'auto auto' }}>\n            <Switch\n              checked={isToggled}\n              onChange={onToggle}\n              sx={{\n                'input:checked ~ &': {\n                  backgroundColor: 'grey'\n                },\n                marginRight: '0px'\n              }}\n            />\n          </Box>\n        </Flex>\n        <Flex>\n          <Box sx={{ flex: '1 1 auto' }}>\n            <MinerParagraph>Total hashes</MinerParagraph>\n          </Box>\n          <Box>\n            <MinerParagraph>{hashes}</MinerParagraph>\n          </Box>\n        </Flex>\n        <Flex>\n          <Box sx={{ flex: '1 1 auto' }}>\n            <MinerParagraph>Hash rate</MinerParagraph>\n          </Box>\n          <Box>\n            <MinerParagraph>{hashrate} h/s</MinerParagraph>\n          </Box>\n        </Flex>\n        <Flex>\n          <Box sx={{ flex: '1 1 auto' }}>\n            <MinerParagraph>Status</MinerParagraph>\n          </Box>\n          <Box>\n            <MinerParagraph>\n              {isToggled ? <Badge bg=\"green\">{status}</Badge> : <Badge bg=\"red\">offline</Badge>}\n            </MinerParagraph>\n          </Box>\n        </Flex>\n      </Box>\n    </MinerContainer>\n  );\n};\n\nexport default Miner;\n\nconst MinerHeading = styled(Headings.h2)((p: ITAOAThemeUIContext) => ({\n  color: p.theme.colors.invpostText,\n  margin: 0\n}));\nconst MinerParagraph = styled(Headings.h5)((p: ITAOAThemeUIContext) => ({\n  color: p.theme.colors.invpostText,\n  margin: 0\n}));\nconst MinerContainer = styled.div((p: ITAOAThemeUIContext) => ({\n  width: '100%',\n  maxWidth: '780px',\n  margin: '25px auto 18px',\n\n  [mediaquery.desktop()]: {\n    maxWidth: '607px'\n  },\n\n  [mediaquery.tablet()]: {\n    maxWidth: '586px',\n    margin: '30px auto 18px'\n  }\n}));\n","import { mediaquery } from '@styles/media';\nimport { ITAOAThemeUIContext } from '@types';\n\nimport styled from '@emotion/styled';\nimport * as CSS from 'csstype';\n\nexport const commonStyles = (p: ITAOAThemeUIContext): any => ({\n  width: '100%',\n  paddingTop: '10px',\n  paddingBottom: '10px',\n\n  [mediaquery.desktop()]: {\n    maxWidth: '607px'\n  },\n   \n  [mediaquery.tablet()]: {\n    maxWidth: '586px',\n    margin: '0 auto 25px',\n  },\n});\n\n\nconst Paragraph = styled.p((p: ITAOAThemeUIContext) => ({\n  ...commonStyles(p),\n  maxWidth: '800px',\n  lineHeight: '1.756',\n  fontSize: '18px',\n  color: p.theme.colors.postText,\n  fontFamily: p.theme.fonts.sansSerif,\n  transition: p.theme.colorModeTransition,\n\n  b: {\n    fontWeight: 800\n  },\n\n  [mediaquery.tablet()]: {\n    fontSize: '16px'\n  },\n\n  [mediaquery.phablet()]: {\n    fontSize: '14px'\n  }\n}));\n\nexport default Paragraph;\n"],"names":["ws","status","setstatus","sethash","hash","job","workers","receiveStack","sendStack","connected","attempts","throttleMiner","handshake","identifier","login","password","pool","userid","version","formatConsoleDate","date","hour","getHours","minutes","getMinutes","seconds","getSeconds","getMilliseconds","slice","mutex","sleep","ms","expire","Date","getTime","addWorker","newWorker","Worker","push","onmessage","on_workermsg","setTimeout","informWorker","startBroadcast","mining","BroadcastChannel","stopBroadcast","bc","number","Math","random","array","timerc","wantsToStart","data","indexOf","id","setInterval","postMessage","sort","hash_update","close","clearInterval","startMining","numThreads","WebAssembly","instantiate","module","Module","Uint8Array","of","Instance","e","isWasmSupported","stopMining","numOfLogicalProcessors","window","navigator","hardwareConcurrency","createWorkers","reconnector","readyState","console","log","WebSocket","event","obj","JSON","parse","stringify","onerror","onclose","onopen","send","i","length","terminate","deleteAllWorkers","wrk","target","jbthrt","throttle","max","min","succeed","incHash","start","power","hashcount","sethashcount","stat","setstat","useState","isToggled","setIsToggled","hashes","sethashes","oldsethashes","hashrate","sethashrate","useEffect","timer","h","o","r","round","abs","MinerContainer","p","bg","sx","borderRadius","flex","MinerHeading","display","justifyContent","margin","checked","onChange","backgroundColor","marginRight","MinerParagraph","Headings","color","theme","colors","invpostText","width","maxWidth","mediaquery","paddingTop","paddingBottom","lineHeight","fontSize","postText","fontFamily","fonts","sansSerif","transition","colorModeTransition","b","fontWeight"],"sourceRoot":""}