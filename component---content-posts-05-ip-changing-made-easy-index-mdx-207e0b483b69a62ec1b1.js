"use strict";(self.__LOADABLE_LOADED_CHUNKS__=self.__LOADABLE_LOADED_CHUNKS__||[]).push([[352],{97499:function(n,e,t){t.r(e),t.d(e,{_frontmatter:function(){return s},default:function(){return m}});var a=t(87462),o=t(63366),i=(t(67294),t(10498)),r=t(24731),p=["components"],s={},l={_frontmatter:s},d=r.Z;function m(n){var e=n.components,t=(0,o.Z)(n,p);return(0,i.kt)(d,(0,a.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"the-normal-way-to-change-ips"},"The normal way to change IPs"),(0,i.kt)("p",null,"It's very handy as a programmer to change your public facing IP. Whether you\nwant to pretend your computer is in a different country or just want to get\naround an IP ban, being able to masquerade your IP has many uses."),(0,i.kt)("p",null,"The workflow ",(0,i.kt)("strong",{parentName:"p"},"I've")," always used to achieve this is:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"running ",(0,i.kt)("inlineCode",{parentName:"li"},"openvpn")," as a background process"),(0,i.kt)("li",{parentName:"ol"},"do what I want to do"),(0,i.kt)("li",{parentName:"ol"},"kill the ",(0,i.kt)("inlineCode",{parentName:"li"},"openvpn")," process")),(0,i.kt)("p",null,"When I was testing some IP banning tooling I was using this workflow and\nquickly came across the problem that switching locations/IPs multiple times\ngets annoying as I have to kill and start ",(0,i.kt)("inlineCode",{parentName:"p"},"openvpn")," multiple times. So I\nwanted to build a utility to make it easier by collapsing this workflow into\njust one step."),(0,i.kt)("p",null,"The ideal experience I wanted was to run a command isolated from the\nrest of my local network, yet be connected to a VPN whose location I can\nchange with a single argument."),(0,i.kt)("h2",{id:"coding-it-up"},"Coding it up"),(0,i.kt)("p",null,"Since I wanted isolation for this tool, I chose ",(0,i.kt)("inlineCode",{parentName:"p"},"podman")," as it's my goto\ncontainer engine for my one off isolation needs. The simplest place I started\nwas with a quick script to build an ",(0,i.kt)("inlineCode",{parentName:"p"},"ovpn")," alpine image like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NAME=ovpn\ncat << EOF > /tmp/Dockerfile.${NAME}\nFROM alpine:3.12\nRUN apk add --no-cache openvpn bash\nEOF\nEMPTY=$(mktemp -d)\npodman build -q -t ${NAME} -f /tmp/Dockerfile.${NAME} $EMPTY 2>&1 > /dev/null\n")),(0,i.kt)("p",null,"The immediate problem I saw with this approach was that the container image\ndoesn't include any of my local tools. It didn't seem practical to keep\nadding dependencies as needed to this image. This would cause image bloat and\nI would have to rebuild the image any time I want to add something."),(0,i.kt)("p",null,"I wanted a way to run this image as a conduit for my other tools."),(0,i.kt)("p",null,"The solution I eventually reached was to simply ",(0,i.kt)("strong",{parentName:"p"},"run")," the isolated ",(0,i.kt)("inlineCode",{parentName:"p"},"openvpn"),"\ncontainer, ",(0,i.kt)("strong",{parentName:"p"},"then")," run a command I wanted ",(0,i.kt)("strong",{parentName:"p"},"in")," the containers network\nnamespace. That way I get the network isolation I want, ",(0,i.kt)("strong",{parentName:"p"},"with")," the ability to\nisolate the entire execution of a command behind a VPN."),(0,i.kt)("p",null,"To do this I ran the container with privileges to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"tun")," interface\nlike so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \\\n       --name ${CONTAINER_NAME} \\\n       -v /tmp/ovpn/:/tmp/ovpn/ \\\n       -it -d ${NAME} \\\n       bash -c \"\n       openvpn \\\n       --config $FILE \\\n       --auth-nocache \\\n       --auth-retry nointeract \\\n       --dev $tun \\\n       --dev-type tun \\\n       --errors-to-stderr \\\n       --auth-user-pass <(echo -e '$USERNAME\\n$PASSWORD')\n       \" 1>&2\n")),(0,i.kt)("p",null,"Then I used ",(0,i.kt)("inlineCode",{parentName:"p"},"nsenter")," to run a command in the context of the containers\nnetwork namespace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"...\nPID=$(podman inspect ${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')\nnsenter -U -n -t $PID $@\n")),(0,i.kt)("p",null,"This worked just as expected, and when the command finishes, the container can\nbe stopped and removed for seamless cleanup."),(0,i.kt)("p",null,"Hooray containers and namespaces! ðŸ“¦ðŸŽŠ"),(0,i.kt)("p",null,"Wrapping this all together in a script ",(0,i.kt)("inlineCode",{parentName:"p"},"run_behind_vpn"),", I can now run a\ncommand masquerading as different IPs like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/usr/bin/env bash\nexport USERNAME=$USERNAME\nexport PASSWORD=$PASSWORD\nexport US=$(find /tmp/ovpn/*us* -print -quit) # find a US ovpn file\nexport JAPAN=$(find /tmp/ovpn/*jp* -print -quit) # find a JP ovpn file\nrun_behind_vpn $US -- curl -s ipinfo.io | jq -r '.country'\nrun_behind_vpn $JAPAN -- curl -s ipinfo.io | jq -r '.country'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"US\nJP\n")),(0,i.kt)("p",null,"Now if I ever need to pretend that I'm running my computer from a different\ncountry or need a new IP, I have a method to do so."),(0,i.kt)("p",null,"Try the script out for yourself ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cmrfrd/dotfiles/blob/master/scripts/run_behind_vpn"},"here")," and thanks for reading!"))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---content-posts-05-ip-changing-made-easy-index-mdx-207e0b483b69a62ec1b1.js.map