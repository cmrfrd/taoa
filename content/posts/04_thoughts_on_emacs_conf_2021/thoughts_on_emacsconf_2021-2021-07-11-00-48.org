#+TITLE: Thoughts on EmacsConf 2021
#+CREATED: [2021-12-25 Sat 23:43]
#+LAST_MODIFIED: [2021-12-26 Sun 00:23]
#+ROAM_TAGS: composition
#+OPTIONS: toc:nil
#+OPTIONS: tex:t
#+OPTIONS: _:nil ^:nil p:nil

#+HUGO_BASE_DIR: ./
#+hugo_front_matter_format: yaml
#+HUGO_CUSTOM_FRONT_MATTER: :date (org-to-blog-date (org-global-prop-value "CREATED"))
#+HUGO_CUSTOM_FRONT_MATTER: :hero ./images/cover.jpg
#+HUGO_CUSTOM_FRONT_MATTER: :secret false
#+HUGO_CUSTOM_FRONT_MATTER: :excerpt Emacs Makers Are Crazy Sickos

#+BEGIN_SRC emacs-lisp :exports none
  (add-to-list 'org-export-filter-headline-functions
               'remove-regexp-curly-braces)
  (export-to-mdx-on-save)
#+END_SRC

#+RESULTS:
: Enabled mdx on save


* EmacsConf 2021

  Every year, I like to watch [[https://emacsconf.org/2021/][EmacsConf]] not only to learn about the latest and
  greatest in the Emacs world, but also to gain some new perspective as to why other
  people use Emacs and how it's benefited them.

  It's been a few weeks since all the talks were posted online and after
  watching all of them I wanted to share my thoughts on which talks really stood
  out to me.

* Emacs as Design Pattern Learning

  In [[https://emacsconf.org/2021/talks/pattern/][Emacs as Design Pattern Learning]], Greta Goetz goes very philosophical and
  talks about Emacs in the context of self-education.

  The first interesting point Goetz states is, with Emacs: /"we can be our own
  persona."/

  "Personas" in this talk are meant to be the same as those that are used in
  product design. When designing products, personas are usually the first things
  that are developed. They help guide decision-making, such that products can be
  tailored to these manufactured identities. Designers build the "customer
  journey" around these personas which (for better or worse) constrain the
  experience of a product. Emacs on the other hand is designed contrary to
  personas. Goetz describes that instead of pre-designed constraints, users are
  *intentionally* given a rich context of tools and information (Elisp
  packages/apps/configuration). Providing this complexity is intended to
  eliminate constraints, allowing users to *be* their own personas, and create
  their own product. Instead of the user living an experience built around some
  notion of a person, the user is enabled to let their *unique* persona dictate
  their experience.

  Goetz then continues to describe the most important point (in my opinion) that
  the ability to build our own experiences and extend our freedom is an
  important skill in life, as it helps us contextualize our own decision-making
  processes and is the first step in learning how to learn.

  This is a mind bomb and reminded me of the ideas from the post [[https://batsov.com/articles/2021/11/24/emacs-is-a-lifestyle/\]\[]["Emacs is a
  lifestyle"]] by Bozhidar Batsov. Just like how Goetz describes the Emacs
  experience as an exercise in contextualizing your own decision-making process,
  Bastov emphasizes the similar idea that Emacs offers one of the most valuable
  features, *the choice to configure*, which most other software doesn't.

  This nugget of wisdom is a great snippet that represents the Emacs user
  experience. Instead of thinking of software as something you have to "gel"
  with, Emacs "gels" with you.

* Emacs demonstrates that the UNIX philosophy isn't the only answer

  In the short talk [[https://emacsconf.org/2021/talks/unix/][Why Emacs demonstrates the UNIX philosophy isn't the only
  answer]], Daniel Rose talks about how Emacs fits within the UNIX philosophy. He
  also addresses the usefulness of software philosophies in general.

  The most useful piece of advice to me was when Rose mentions: "philosophies
  don't mean everything." In the context of Emacs, Rose is implying that just
  because Emacs *can* accomplish a task doesn't mean it *should*. Rose relates
  to this point with a personal anecdote of using Android Studio over Emacs for
  development. Just as there are many tools better suited for Android
  development than Emacs, there are other situations where Emacs is the inferior
  tool.

  My thoughts on this talk are extremely positive. I think *every* EmacsConf
  needs to have a talk that mentions the point "you should choose the best tool
  for the job." The half serious, half joke of Emacs being more of an OS than a
  text editor makes the community look big-headed. With all the talks mentioning
  the things that Emacs *can* do, grounding the conference by mentioning what it
  *can't* do is always a nice breath of fresh air.

* Takeaways

  Both of these talks from this years EmacsConf are worth mentioning because
  they highlight the simultaneous liberties and restrictions Emacs provides.
  I'm grateful EmacsConf releases all this free content because it gives me
  access to all the liberties of Emacs, and lets me acknowledge and internalize
  all its restrictions.

  I've been using Emacs for ~5 years and although all the tweaking and tuning
  can be tedious, it's allowed me to reflect and rebuild *my* best user
  experience. The practice of constantly reevaluating what makes me effective
  not only keeps my brain fluid, but keeps me thinking how to continually evolve
  myself.

  Emacs definitely isn't for everyone and I don't recommend it often. However if
  you really want to customize your workflow or can't find another tool that
  suits you, it just might be worth a try.

  ~~(^-^)~~
