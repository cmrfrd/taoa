#+TITLE: IP Changing Made Easy
#+CREATED: [2022-01-21 Fri 21:56]
#+LAST_MODIFIED: [2022-02-02 Wed 10:07]
#+FILETAGS: fleeting

#+OPTIONS: toc:nil
#+OPTIONS: tex:t
#+OPTIONS: _:nil ^:nil p:nil

#+HUGO_BASE_DIR: ./
#+hugo_front_matter_format: yaml
#+HUGO_CUSTOM_FRONT_MATTER: :date (org-to-blog-date (org-global-prop-value "CREATED"))
#+HUGO_CUSTOM_FRONT_MATTER: :hero ./images/cover.jpg
#+HUGO_CUSTOM_FRONT_MATTER: :secret false
#+HUGO_CUSTOM_FRONT_MATTER: :excerpt Switching it up one IP at a time

#+begin_src emacs-lisp :exports none
(org-babel-do-load-languages
  'org-babel-load-languages
  '((shell . t)
    (python . t)))
#+end_src

#+RESULTS:

#+BEGIN_SRC emacs-lisp :exports none
  (add-to-list 'org-export-filter-headline-functions
               'remove-regexp-curly-braces)
  (export-to-mdx-on-save)
#+END_SRC

#+RESULTS:
: Enabled mdx on save

* The normal way to change IPs

  It's very handy as a programmer to change your public facing IP. Whether you
  want to pretend your computer is in a different country or just want to get
  around an IP ban, being able to masquerade your IP has many uses.

  The workflow *I've* always used to achieve this is:

  1. running ~openvpn~ as a background process
  2. do what I want to do
  3. kill the ~openvpn~ process

  When I was testing some IP banning tooling I was using this workflow and
  quickly came across the problem that switching locations/IPs multiple times
  gets annoying as I have to kill and start ~openvpn~ multiple times. So I
  wanted to build a utility to make it easier by collapsing this workflow into
  just one step.

  The ideal experience I wanted was to run a command isolated from the
  rest of my local network, yet be connected to a VPN whose location I can
  change with a single argument.

* Coding it up

  Since I wanted isolation for this tool, I chose ~podman~ as it's my goto
  container engine for my one off isolation needs. The simplest place I started
  was with a quick script to build an ~ovpn~ alpine image like so:

  #+HEADER: :exports code
  #+begin_src bash :eval no
    NAME=ovpn
    cat << EOF > /tmp/Dockerfile.${NAME}
    FROM alpine:3.12
    RUN apk add --no-cache openvpn bash
    EOF
    EMPTY=$(mktemp -d)
    podman build -q -t ${NAME} -f /tmp/Dockerfile.${NAME} $EMPTY 2>&1 > /dev/null
  #+end_src

  The immediate problem I saw with this approach was that the container image
  doesn't include any of my local tools. It didn't seem practical to keep
  adding dependencies as needed to this image. This would cause image bloat and
  I would have to rebuild the image any time I want to add something.

  I wanted a way to run this image as a conduit for my other tools.

  The solution I eventually reached was to simply *run* the isolated ~openvpn~
  container, *then* run a command I wanted *in* the containers network
  namespace. That way I get the network isolation I want, *with* the ability to
  isolate the entire execution of a command behind a VPN.

  To do this I ran the container with privileges to create a ~tun~ interface
  like so:

  #+HEADER: :exports code
  #+begin_src bash :eval no
    podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \
           --name ${CONTAINER_NAME} \
           -v /tmp/ovpn/:/tmp/ovpn/ \
           -it -d ${NAME} \
           bash -c "
           openvpn \
           --config $FILE \
           --auth-nocache \
           --auth-retry nointeract \
           --dev $tun \
           --dev-type tun \
           --errors-to-stderr \
           --auth-user-pass <(echo -e '$USERNAME\n$PASSWORD')
           " 1>&2
  #+end_src

  Then I used ~nsenter~ to run a command in the context of the containers
  network namespace:

  #+HEADER: :exports code
  #+begin_src bash :eval no
    ...
    PID=$(podman inspect ${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')
    nsenter -U -n -t $PID $@
  #+end_src

  This worked just as expected, and when the command finishes, the container can
  be stopped and removed for seamless cleanup.

  Hooray containers and namespaces! ðŸ“¦ðŸŽŠ

  Wrapping this all together in a script ~run_behind_vpn~, I can now run a
  command masquerading as different IPs like so:

  #+header: :exports code output
  #+header: :results output replace
  #+header: :shebang "source ~/.zshrc"
  #+header: :var USERNAME=(gethash "username" (gethash "login" (elt (bitwarden-search "protonvpn") 0)))
  #+header: :var PASSWORD=(gethash "password" (gethash "login" (elt (bitwarden-search "protonvpn") 0)))
  #+begin_src bash :async :eval no
    #!/usr/bin/env bash
    export USERNAME=$USERNAME
    export PASSWORD=$PASSWORD
    export US=$(find /tmp/ovpn/*us* -print -quit) # find a US ovpn file
    export JAPAN=$(find /tmp/ovpn/*jp* -print -quit) # find a JP ovpn file
    run_behind_vpn $US -- curl -s ipinfo.io | jq -r '.country'
    run_behind_vpn $JAPAN -- curl -s ipinfo.io | jq -r '.country'
  #+end_src

  #+RESULTS:
  : US
  : JP

  Now if I ever need to pretend that I'm running my computer from a different
  country or need a new IP, I have a method to do so.

  Try the script out for yourself [[https://github.com/cmrfrd/dotfiles/blob/master/scripts/run_behind_vpn][here]] and thanks for reading!
