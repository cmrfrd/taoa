"use strict";(self.__LOADABLE_LOADED_CHUNKS__=self.__LOADABLE_LOADED_CHUNKS__||[]).push([[585],{88713:function(n,e,t){t.r(e),t.d(e,{_frontmatter:function(){return p},default:function(){return u}});var a=t(87462),o=t(63366),i=(t(67294),t(10498)),s=t(50347),r=["components"],p={},l={_frontmatter:p},d=s.Z;function u(n){var e=n.components,t=(0,o.Z)(n,r);return(0,i.kt)(d,(0,a.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"ip-banning"},"IP Banning"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/AACGbCOqSmo"},"A video")," came across by YouTube feed by Ben Awad about his ClubHouse clone\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/benawad/dogehouse"},"Dogehouse"),". He spoke about incorporating IP banning in his app, which inspired\nme to want to incorporating IP banning in some of my bastion hosts. Although\nhe incorporated it ",(0,i.kt)("strong",{parentName:"p"},"in")," his app, I wanted to explore ways to do IP\nbanning/rate limiting with ",(0,i.kt)("inlineCode",{parentName:"p"},"iptables")," via techniques like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"iptables -A INPUT -p tcp --dport 22 -m hashlimit --hashlimit-upto 50/min \\\n    --hashlimit-burst 500 --hashlimit-mode srcip --hashlimit-name ssh -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j DROP\n")),(0,i.kt)("p",null,"I wanted to test these rules by DoS'ing myself from a bunch of different\npublic IPs, but unfortunately I didn't have a bunch of public IPs\nhandy. Ideally I wanted to be able to run some DoS script behind some IP, then\nwhen I get blocked, run the script again behind another new IP until I'm\nconvinced the rules work."),(0,i.kt)("p",null,"This begged the question:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},'"What is an easy way to run a command masquerading as some public IP?"'))),(0,i.kt)("p",null,'The obvious answers most developers would say is either "rent a VPS", or "use\na VPN". Personally I thought that using VPN was easier because I\'m impatient\nand don\'t want to wait for a VPS to be provisioned on some cloud service.'),(0,i.kt)("p",null,"Once I decided to go down the VPN route, I now wanted a way to run a single\ncommand behind the VPN, but isolated from the rest of my system. I wanted this\nisolation because I don't want to worry about connecting/disconnecting from\nthe VPN ",(0,i.kt)("strong",{parentName:"p"},"and")," so I can incorporate an easy way to switch locations/IPs with a\nsingle argument."),(0,i.kt)("h2",{id:"coding-it-up"},"Coding it up"),(0,i.kt)("p",null,"Since I wanted isolation for this tool, I chose ",(0,i.kt)("inlineCode",{parentName:"p"},"podman")," as it's my goto\ncontainer engine for my one off isolation needs. The simplest place I started\nwas with a quick script to build an ",(0,i.kt)("inlineCode",{parentName:"p"},"ovpn")," alpine image like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NAME=ovpn\ncat << EOF > /tmp/Dockerfile.${NAME}\nFROM alpine:3.12\nRUN apk add --no-cache openvpn bash\nEOF\nEMPTY=$(mktemp -d)\npodman build -q -t ${NAME} -f /tmp/Dockerfile.${NAME} $EMPTY 2>&1 > /dev/null\n")),(0,i.kt)("p",null,"The immediate problem that I had with this image was that it doesn't include\nthe scripts I need to do my DoS testing. It also doesn't seem practical to\nkeep adding dependencies as needed to this image. This would cause image bloat\nand I would have to rebuild the image any time I want to add\nsomething. Instead I wanted a way to run this image as a conduit for my other\ntools."),(0,i.kt)("p",null,"The solution I eventually reached was to simply ",(0,i.kt)("strong",{parentName:"p"},"run")," the isolated ",(0,i.kt)("inlineCode",{parentName:"p"},"openvpn"),"\ncontainer as normal, ",(0,i.kt)("strong",{parentName:"p"},"then")," run a command in the containers ",(0,i.kt)("strong",{parentName:"p"},"network\nnamespace"),". That way I get the network isolation I want, ",(0,i.kt)("strong",{parentName:"p"},"with")," the ability to\nisolate the entire execution of a command behind a VPN."),(0,i.kt)("p",null,"To do this I ran the container with privileges to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"tun")," interface\nlike so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \\\n       --name ${CONTAINER_NAME} \\\n       -v /tmp/ovpn/:/tmp/ovpn/ \\\n       -it -d ${NAME} \\\n       bash -c \"\n       openvpn \\\n       --config $FILE \\\n       --auth-nocache \\\n       --auth-retry nointeract \\\n       --dev $tun \\\n       --dev-type tun \\\n       --errors-to-stderr \\\n       --auth-user-pass <(echo -e '$USERNAME\\n$PASSWORD')\n       \" 1>&2\n")),(0,i.kt)("p",null,"Then I used ",(0,i.kt)("inlineCode",{parentName:"p"},"nsenter")," to run a command in the context of the containers\nnetwork namespace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"...\nPID=$(podman inspect ${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')\nnsenter -U -n -t $PID $@\n")),(0,i.kt)("p",null,"This worked just as expected, and when the command finishes, the container can\nbe stopped and removed for seamless cleanup."),(0,i.kt)("p",null,"Hooray containers and namespaces! ðŸ“¦ðŸŽŠ"),(0,i.kt)("p",null,"Wrapping this all together in a script ",(0,i.kt)("inlineCode",{parentName:"p"},"run_behind_vpn"),", I can now run a\ncommand masquerading as different IPs like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/usr/bin/env bash\nexport USERNAME=$USERNAME\nexport PASSWORD=$PASSWORD\nexport US=$(find /tmp/ovpn/*us* -print -quit) # find a US ovpn file\nexport JAPAN=$(find /tmp/ovpn/*jp* -print -quit) # find a JP ovpn file\nrun_behind_vpn $US -- curl -s ipinfo.io | jq -r '.country'\nrun_behind_vpn $JAPAN -- curl -s ipinfo.io | jq -r '.country'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"US\nJP\n")),(0,i.kt)("p",null,"Now if I ever need to pretend that I'm running my computer from a different\ncountry or need a new IP, I have a method to do so."),(0,i.kt)("p",null,"Try the script out for yourself ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cmrfrd/dotfiles/blob/master/scripts/run_behind_vpn"},"here")," and thanks for reading!"))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---content-posts-05-isolating-commands-behind-a-vpn-index-mdx-0cc07b5315e123d8b93a.js.map