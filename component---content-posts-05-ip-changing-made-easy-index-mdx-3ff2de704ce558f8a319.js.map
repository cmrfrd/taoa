{"version":3,"file":"component---content-posts-05-ip-changing-made-easy-index-mdx-3ff2de704ce558f8a319.js","mappings":"iRAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,gCADR,iCAGA,kPAGA,kCAAoB,kBAAQC,WAAW,KAAnB,QAApB,qCACA,mBACE,cAAIA,WAAW,MAAf,YAAgC,sBAAYA,WAAW,MAAvB,WAAhC,6BACA,cAAIA,WAAW,MAAf,yBACA,cAAIA,WAAW,MAAf,aAAiC,sBAAYA,WAAW,MAAvB,WAAjC,cAEF,sNAEwC,sBAAYA,WAAW,KAAvB,WAFxC,wHAKA,oMAGA,cACE,GAAM,gBADR,iBAGA,qEAAuD,sBAAYA,WAAW,KAAvB,UAAvD,yIAEkC,sBAAYA,WAAW,KAAvB,QAFlC,2BAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,sNAUL,8TAIA,uFACA,qEAAuD,kBAAQA,WAAW,KAAnB,OAAvD,kBAAgH,sBAAYA,WAAW,KAAvB,WAAhH,iBACS,kBAAQA,WAAW,KAAnB,QADT,4BAC6E,kBAAQA,WAAW,KAAnB,MAD7E,qFAEsD,kBAAQA,WAAW,KAAnB,QAFtD,6EAIA,gFAAkE,sBAAYA,WAAW,KAAvB,OAAlE,yBAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,qcAiBL,iCAAmB,sBAAYA,WAAW,KAAvB,WAAnB,2EAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,0GAML,kJAEA,4DACA,4DAA8C,sBAAYA,WAAW,KAAvB,kBAA9C,sEAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,yVAUL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,cAKL,sJAEA,qDAAuC,aAAGA,WAAW,IACjD,KAAQ,yEAD2B,QAAvC,6BAOJJ,EAAWK,gBAAiB","sources":["webpack://TAOA/./content/posts/05_ip_changing_made_easy/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/node/work/src/templates/post.template.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"the-normal-way-to-change-ips\"\n    }}>{`The normal way to change IPs`}</h2>\n    <p>{`It's very handy as a programmer to change your public facing IP. Whether you\nwant to pretend your computer is in a different country or just want to get\naround an IP ban, being able to masquerade your IP has many uses.`}</p>\n    <p>{`The workflow `}<strong parentName=\"p\">{`I've`}</strong>{` always used to achieve this is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`running `}<inlineCode parentName=\"li\">{`openvpn`}</inlineCode>{` as a background process`}</li>\n      <li parentName=\"ol\">{`do what I want to do`}</li>\n      <li parentName=\"ol\">{`kill the `}<inlineCode parentName=\"li\">{`openvpn`}</inlineCode>{` process`}</li>\n    </ol>\n    <p>{`When I was testing some IP banning tooling I was using this workflow and\nquickly came across the problem that switching locations/IPs multiple times\ngets annoying as I have to kill and start `}<inlineCode parentName=\"p\">{`openvpn`}</inlineCode>{` multiple times. So I\nwanted to build a utility to make it easier by collapsing this workflow into\njust one step.`}</p>\n    <p>{`The ideal experience I wanted was to run a command isolated from the\nrest of my local network, yet be connected to a VPN whose location I can\nchange with a single argument.`}</p>\n    <h2 {...{\n      \"id\": \"coding-it-up\"\n    }}>{`Coding it up`}</h2>\n    <p>{`Since I wanted isolation for this tool, I chose `}<inlineCode parentName=\"p\">{`podman`}</inlineCode>{` as it's my goto\ncontainer engine for my one off isolation needs. The simplest place I started\nwas with a quick script to build an `}<inlineCode parentName=\"p\">{`ovpn`}</inlineCode>{` alpine image like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`NAME=ovpn\ncat << EOF > /tmp/Dockerfile.\\${NAME}\nFROM alpine:3.12\nRUN apk add --no-cache openvpn bash\nEOF\nEMPTY=$(mktemp -d)\npodman build -q -t \\${NAME} -f /tmp/Dockerfile.\\${NAME} $EMPTY 2>&1 > /dev/null\n`}</code></pre>\n    <p>{`The immediate problem I saw with this approach was that the container image\ndoesn't include any of my local tools. It didn't seem practical to keep\nadding dependencies as needed to this image. This would cause image bloat and\nI would have to rebuild the image any time I want to add something.`}</p>\n    <p>{`I wanted a way to run this image as a conduit for my other tools.`}</p>\n    <p>{`The solution I eventually reached was to simply `}<strong parentName=\"p\">{`run`}</strong>{` the isolated `}<inlineCode parentName=\"p\">{`openvpn`}</inlineCode>{`\ncontainer, `}<strong parentName=\"p\">{`then`}</strong>{` run a command I wanted `}<strong parentName=\"p\">{`in`}</strong>{` the containers network\nnamespace. That way I get the network isolation I want, `}<strong parentName=\"p\">{`with`}</strong>{` the ability to\nisolate the entire execution of a command behind a VPN.`}</p>\n    <p>{`To do this I ran the container with privileges to create a `}<inlineCode parentName=\"p\">{`tun`}</inlineCode>{` interface\nlike so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \\\\\n       --name \\${CONTAINER_NAME} \\\\\n       -v /tmp/ovpn/:/tmp/ovpn/ \\\\\n       -it -d \\${NAME} \\\\\n       bash -c \"\n       openvpn \\\\\n       --config $FILE \\\\\n       --auth-nocache \\\\\n       --auth-retry nointeract \\\\\n       --dev $tun \\\\\n       --dev-type tun \\\\\n       --errors-to-stderr \\\\\n       --auth-user-pass <(echo -e '$USERNAME\\\\n$PASSWORD')\n       \" 1>&2\n`}</code></pre>\n    <p>{`Then I used `}<inlineCode parentName=\"p\">{`nsenter`}</inlineCode>{` to run a command in the context of the containers\nnetwork namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`...\nPID=$(podman inspect \\${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')\nnsenter -U -n -t $PID $@\n`}</code></pre>\n    <p>{`This worked just as expected, and when the command finishes, the container can\nbe stopped and removed for seamless cleanup.`}</p>\n    <p>{`Hooray containers and namespaces! ðŸ“¦ðŸŽŠ`}</p>\n    <p>{`Wrapping this all together in a script `}<inlineCode parentName=\"p\">{`run_behind_vpn`}</inlineCode>{`, I can now run a\ncommand masquerading as different IPs like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/usr/bin/env bash\nexport USERNAME=$USERNAME\nexport PASSWORD=$PASSWORD\nexport US=$(find /tmp/ovpn/*us* -print -quit) # find a US ovpn file\nexport JAPAN=$(find /tmp/ovpn/*jp* -print -quit) # find a JP ovpn file\nrun_behind_vpn $US -- curl -s ipinfo.io | jq -r '.country'\nrun_behind_vpn $JAPAN -- curl -s ipinfo.io | jq -r '.country'\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`US\nJP\n`}</code></pre>\n    <p>{`Now if I ever need to pretend that I'm running my computer from a different\ncountry or need a new IP, I have a method to do so.`}</p>\n    <p>{`Try the script out for yourself `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cmrfrd/dotfiles/blob/master/scripts/run_behind_vpn\"\n      }}>{`here`}</a>{` and thanks for reading!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}