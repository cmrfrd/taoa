{"version":3,"file":"component---content-posts-05-isolating-commands-behind-a-vpn-index-mdx-0cc07b5315e123d8b93a.js","mappings":"iRAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,cADR,eAGA,kBAAG,aAAGC,WAAW,IACb,KAAQ,gCADT,WAAH,wEAGF,aAAGA,WAAW,IACR,KAAQ,wCADd,aAHE,2KAOiB,kBAAQA,WAAW,KAAnB,MAPjB,4EAQyB,sBAAYA,WAAW,KAAvB,YARzB,6BASA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,iNAML,sVAKA,+CACA,2BACE,aAAGA,WAAW,eAAa,cAAIA,WAAW,KAAf,6EAE7B,8PAGA,uQAGM,kBAAQA,WAAW,KAAnB,OAHN,uFAKA,cACE,GAAM,gBADR,iBAGA,qEAAuD,sBAAYA,WAAW,KAAvB,UAAvD,yIAEkC,sBAAYA,WAAW,KAAvB,QAFlC,2BAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,sNAUL,mZAMA,qEAAuD,kBAAQA,WAAW,KAAnB,OAAvD,kBAAgH,sBAAYA,WAAW,KAAvB,WAAhH,2BACmB,kBAAQA,WAAW,KAAnB,QADnB,qCACgG,kBAAQA,WAAW,KAAnB,sBADhG,mDAEmE,kBAAQA,WAAW,KAAnB,QAFnE,6EAIA,gFAAkE,sBAAYA,WAAW,KAAvB,OAAlE,yBAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,qcAiBL,iCAAmB,sBAAYA,WAAW,KAAvB,WAAnB,2EAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,0GAML,kJAEA,4DACA,4DAA8C,sBAAYA,WAAW,KAAvB,kBAA9C,sEAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,yVAUL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,cAKL,sJAEA,qDAAuC,aAAGA,WAAW,IACjD,KAAQ,yEAD2B,QAAvC,6BAOJJ,EAAWK,gBAAiB","sources":["webpack://TAOA/./content/posts/05_isolating_commands_behind_a_vpn/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/node/work/src/templates/post.template.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"ip-banning\"\n    }}>{`IP Banning`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://youtu.be/AACGbCOqSmo\"\n      }}>{`A video`}</a>{` came across by YouTube feed by Ben Awad about his ClubHouse clone\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benawad/dogehouse\"\n      }}>{`Dogehouse`}</a>{`. He spoke about incorporating IP banning in his app, which inspired\nme to want to incorporating IP banning in some of my bastion hosts. Although\nhe incorporated it `}<strong parentName=\"p\">{`in`}</strong>{` his app, I wanted to explore ways to do IP\nbanning/rate limiting with `}<inlineCode parentName=\"p\">{`iptables`}</inlineCode>{` via techniques like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`iptables -A INPUT -p tcp --dport 22 -m hashlimit --hashlimit-upto 50/min \\\\\n    --hashlimit-burst 500 --hashlimit-mode srcip --hashlimit-name ssh -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j DROP\n`}</code></pre>\n    <p>{`I wanted to test these rules by DoS'ing myself from a bunch of different\npublic IPs, but unfortunately I didn't have a bunch of public IPs\nhandy. Ideally I wanted to be able to run some DoS script behind some IP, then\nwhen I get blocked, run the script again behind another new IP until I'm\nconvinced the rules work.`}</p>\n    <p>{`This begged the question:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`\"What is an easy way to run a command masquerading as some public IP?\"`}</em></p>\n    </blockquote>\n    <p>{`The obvious answers most developers would say is either \"rent a VPS\", or \"use\na VPN\". Personally I thought that using VPN was easier because I'm impatient\nand don't want to wait for a VPS to be provisioned on some cloud service.`}</p>\n    <p>{`Once I decided to go down the VPN route, I now wanted a way to run a single\ncommand behind the VPN, but isolated from the rest of my system. I wanted this\nisolation because I don't want to worry about connecting/disconnecting from\nthe VPN `}<strong parentName=\"p\">{`and`}</strong>{` so I can incorporate an easy way to switch locations/IPs with a\nsingle argument.`}</p>\n    <h2 {...{\n      \"id\": \"coding-it-up\"\n    }}>{`Coding it up`}</h2>\n    <p>{`Since I wanted isolation for this tool, I chose `}<inlineCode parentName=\"p\">{`podman`}</inlineCode>{` as it's my goto\ncontainer engine for my one off isolation needs. The simplest place I started\nwas with a quick script to build an `}<inlineCode parentName=\"p\">{`ovpn`}</inlineCode>{` alpine image like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`NAME=ovpn\ncat << EOF > /tmp/Dockerfile.\\${NAME}\nFROM alpine:3.12\nRUN apk add --no-cache openvpn bash\nEOF\nEMPTY=$(mktemp -d)\npodman build -q -t \\${NAME} -f /tmp/Dockerfile.\\${NAME} $EMPTY 2>&1 > /dev/null\n`}</code></pre>\n    <p>{`The immediate problem that I had with this image was that it doesn't include\nthe scripts I need to do my DoS testing. It also doesn't seem practical to\nkeep adding dependencies as needed to this image. This would cause image bloat\nand I would have to rebuild the image any time I want to add\nsomething. Instead I wanted a way to run this image as a conduit for my other\ntools.`}</p>\n    <p>{`The solution I eventually reached was to simply `}<strong parentName=\"p\">{`run`}</strong>{` the isolated `}<inlineCode parentName=\"p\">{`openvpn`}</inlineCode>{`\ncontainer as normal, `}<strong parentName=\"p\">{`then`}</strong>{` run a command in the containers `}<strong parentName=\"p\">{`network\nnamespace`}</strong>{`. That way I get the network isolation I want, `}<strong parentName=\"p\">{`with`}</strong>{` the ability to\nisolate the entire execution of a command behind a VPN.`}</p>\n    <p>{`To do this I ran the container with privileges to create a `}<inlineCode parentName=\"p\">{`tun`}</inlineCode>{` interface\nlike so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \\\\\n       --name \\${CONTAINER_NAME} \\\\\n       -v /tmp/ovpn/:/tmp/ovpn/ \\\\\n       -it -d \\${NAME} \\\\\n       bash -c \"\n       openvpn \\\\\n       --config $FILE \\\\\n       --auth-nocache \\\\\n       --auth-retry nointeract \\\\\n       --dev $tun \\\\\n       --dev-type tun \\\\\n       --errors-to-stderr \\\\\n       --auth-user-pass <(echo -e '$USERNAME\\\\n$PASSWORD')\n       \" 1>&2\n`}</code></pre>\n    <p>{`Then I used `}<inlineCode parentName=\"p\">{`nsenter`}</inlineCode>{` to run a command in the context of the containers\nnetwork namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`...\nPID=$(podman inspect \\${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')\nnsenter -U -n -t $PID $@\n`}</code></pre>\n    <p>{`This worked just as expected, and when the command finishes, the container can\nbe stopped and removed for seamless cleanup.`}</p>\n    <p>{`Hooray containers and namespaces! ðŸ“¦ðŸŽŠ`}</p>\n    <p>{`Wrapping this all together in a script `}<inlineCode parentName=\"p\">{`run_behind_vpn`}</inlineCode>{`, I can now run a\ncommand masquerading as different IPs like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/usr/bin/env bash\nexport USERNAME=$USERNAME\nexport PASSWORD=$PASSWORD\nexport US=$(find /tmp/ovpn/*us* -print -quit) # find a US ovpn file\nexport JAPAN=$(find /tmp/ovpn/*jp* -print -quit) # find a JP ovpn file\nrun_behind_vpn $US -- curl -s ipinfo.io | jq -r '.country'\nrun_behind_vpn $JAPAN -- curl -s ipinfo.io | jq -r '.country'\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`US\nJP\n`}</code></pre>\n    <p>{`Now if I ever need to pretend that I'm running my computer from a different\ncountry or need a new IP, I have a method to do so.`}</p>\n    <p>{`Try the script out for yourself `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cmrfrd/dotfiles/blob/master/scripts/run_behind_vpn\"\n      }}>{`here`}</a>{` and thanks for reading!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}