:PROPERTIES:
:ID:       a35c6a5b-3a56-42f9-8251-03c7362e7b74
:END:
#+TITLE: learning_abstract_algebra
#+CREATED: [2022-05-21 Sat 16:55]
#+LAST_MODIFIED: [2022-06-14 Tue 00:13]
#+FILETAGS: fleeting
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+SETUPFILE: ./latexcss.theme

I am currently learning abstract algebra through a tutor after realizing how in
over my head I was learning elliptic curve pairings. On an abstract level the
concept of billinear maps (which are the desired result produced by elliptic
curve pairings) I can understand, but wawaweewa the underlying mechanisms are
NOT SIMPLE.

I thought I understood a lot of the fundamentals of elliptic curves, but in
order to understand "pairings" you need almost an order of magnitude more
knowledge of elliptic curves to do so.

In order to grow my mathematical foundation I'm leveraging the help of a tutor
to help me smooth over the gaps of my knowledge.

I am starting with undergrad content in abstract algebra here:

https://www.math.miami.edu/~armstrong/562sp22/562sp22notes.pdf

My primary goal is to be able to retain and use this knowledge as a stepping
stone for further complicated topics. To achieve this I'll be taking digestible
pieces from the source material and produce a few blog post (maybe about the
proofs).

* Homework #1
  :PROPERTIES:
  :ID:       4b6e93d8-4436-4253-aa5d-004010becc54
  :END:


** Setup

  #+begin_src emacs-lisp
  (setq org-babel-python-command (format "%s/sympy" (getenv "SCRIPTS")))
  #+end_src

  #+RESULTS:
  : /home/cmrfrd/.dotfiles/scripts/sympy

  #+begin_src python :results output :session :exports both
    import multiprocessing.pool
    import functools

    def timeout(max_timeout):
        """Timeout decorator, parameter in seconds."""
        def timeout_decorator(item):
            """Wrap the original function."""
            @functools.wraps(item)
            def func_wrapper(*args, **kwargs):
                """Closure for function."""
                pool = multiprocessing.pool.ThreadPool(processes=1)
                async_result = pool.apply_async(item, args, kwargs)
                # raises a TimeoutError if execution exceeds max_timeout
                return async_result.get(max_timeout)
            return func_wrapper
        return timeout_decorator
  #+end_src

  #+RESULTS:

** Question 1

   Write a computer program to compute the order of a mod n, i.e., the smallest
   r>=1 such that a^r = 1 mod n.

   #+begin_src python :session :results output :exports both
    @timeout(10.0)
    def find_order_naive(a, n):
        '''
        solves for r:
        a^r = 1 mod n
        '''
        r = 1
        while pow(a, r, n) != 1:
            r += 1
        return r

    print(find_order_naive(10, 17))
   #+end_src

   #+RESULTS:
   : 16

** Question 2

   Use your program to find the order of every element of (Z/13Z)^X. Since
   phi(13)=12 we know from Euler's totient theorem that the order of every
   element of (Z/13)^X has order that divides 12.

   #+begin_src python :session :results value :exports both
    ring_size = 13
    results = [["Element", "Order", f"Div{ring_size-1}"]]
    for elem in range(2, ring_size):
        order = find_order_naive(elem, ring_size)
        results.append(
            [
             elem,
             order,
             (ring_size-1) % order == 0
             ]
      )
    results
   #+end_src

  #+RESULTS:
  | Element | Order | Div12 |
  |       2 |    12 | True  |
  |       3 |     3 | True  |
  |       4 |     6 | True  |
  |       5 |     4 | True  |
  |       6 |    12 | True  |
  |       7 |    12 | True  |
  |       8 |     4 | True  |
  |       9 |     3 | True  |
  |      10 |     6 | True  |
  |      11 |    12 | True  |
  |      12 |     2 | True  |

  Compute phi(d) for every divisor of 12, i.e., for d=1, 2, 3, 4, 6, 12.

  #+begin_src python :session :results output :exports both
    from sympy import divisors
    from sympy.ntheory import factorint, divisors

    def totient(n):
        prime_factors = factorint(n, limit=10000)
        ans = n
        for p in prime_factors.keys():
            ans *= 1 - (1/p)
        return ans

    for d in divisors(12):
        print(totient(d))

  #+end_src

  #+RESULTS:
  : 1
  : 1.0
  : 2.0
  : 2.0
  : 2.0
  : 4.0

  Observe that the number of elements of (Z/13Z)^X of order d equals phi(d). In
  particular, observe that there are phi(12) elements of order 12. These are the
  "generators" of (Z/13)^X.

  We will prove later that the same ideas hold for (Z/pZ)^X whenever p is prime.
